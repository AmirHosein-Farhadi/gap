#AuditModel
type Product{
    serial: String!
    productType: ProductType!
    available: Boolean!
    orgnization: Orgnization!
    images: [String]
    currentUser: Employee
}
type ProductType{
    name: String
    isWeapon: Boolean!
    isPrivate: Boolean
}
type Record{
    user: Employee!
    product: Product!
    time: String!
    command: String!
    status: Boolean!
    description: String
    isReturning: Boolean!
}
type Document{
    date: String
    user: String
}
type Orgnization{
    name: String!
    city: Int!
    address: String!
    phone: String!
    username: String!
    password: String!
    avatar: String
    employees: [Employee!]
    products: [Product!]
}
type Employee{
    name: String!
    nationalId: String!
    employeeId: String!
    address: String
    phoneNumber: String
    position: PositionType!
    orgnization: Orgnization!
    isManager: Boolean!
}
type PositionType{
    title: String!
}

type Query{
  getProduct(serial: String!): Product
  getEmployee(employeeId: ID!): Employee
}
type Mutation{
  addProduct(serial: String!, productType: ProductInput!, available: Boolean!, orgnization: OrgnizationInput!): Product
  addEmployee(name: String!, nationalId: String!, employeeId: String!, position: PositionInput!, orgnization: OrgnizationInput!, isManager: Boolean!): Employee
  addRecord(user: EmployeeInput!, product: ProductInput!, time: String!, command: String!, status: Boolean!, isReturning: Boolean!): Record
}
input ProductInput {
  name: String!
  isWeapon: Boolean!
  isPrivate: Boolean
}
input OrgnizationInput{
  name: String!
  city: Int!
  address: String!
  phone: String!
  username: String!
  password: String!
  avatar: String
  employees: [EmployeeInput!]
  products: [ProductInput!]
}
input PositionInput{
  title: String!
}
input EmployeeInput{
  name: String!
  nationalId: String!
  employeeId: String!
  address: String
  phone: String
  position: PositionInput!
  orgnization: OrgnizationInput!
  isManager: Boolean!
}
